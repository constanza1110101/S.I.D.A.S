import numpy as np
from sklearn.ensemble import IsolationForest
import pandas as pd
import logging

class NetworkAnomalyDetector:
    def __init__(self):
        self.model = IsolationForest(n_estimators=100, contamination=0.01)
        self.is_trained = False
        self.baseline = None
        self.logger = logging.getLogger('sidas.security.anomaly')
        
    def train(self, baseline_data):
        # Entrenar modelo con datos de línea base
        self.model.fit(baseline_data)
        self.baseline = {
            'mean': baseline_data.mean(axis=0),
            'std': baseline_data.std(axis=0),
            'quantiles': {
                '25': np.percentile(baseline_data, 25, axis=0),
                '50': np.percentile(baseline_data, 50, axis=0),
                '75': np.percentile(baseline_data, 75, axis=0),
                '99': np.percentile(baseline_data, 99, axis=0)
            }
        }
        self.is_trained = True
        
    def detect_anomalies(self, network_traffic):
        if not self.is_trained:
            raise ValueError("Model not trained. Call train() first.")
            
        # Normalizar datos
        normalized = (network_traffic - self.baseline['mean']) / self.baseline['std']
        
        # Detectar anomalías
        predictions = self.model.predict(normalized)
        anomaly_scores = self.model.decision_function(normalized)
        
        # Identificar anomalías
        anomalies = network_traffic[predictions == -1]
        anomaly_indices = np.where(predictions == -1)[0]
        
        # Registrar anomalías
        for idx in anomaly_indices:
            self.logger.warning(f"Network anomaly detected: score={anomaly_scores[idx]:.4f}")
            
        return {
            'anomalies': anomalies,
            'indices': anomaly_indices,
            'scores': anomaly_scores[anomaly_indices]
        }
